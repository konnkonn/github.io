<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2015-07-20T14:03:56+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[読みやすいコーディングの心得[リーダブルコード]]]></title>
    <link href="http://morizyun.github.io/blog/readable-code-good-programing/"/>
    <updated>2013-01-11T01:25:00+09:00</updated>
    <id>http://morizyun.github.io/blog/readable-code-good-programing</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873115655/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873115655&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873115655&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873115655" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />読みやすいコードは、一緒にコーディングするチームのためだけではなく、自分のためにもとても重要です。今回は「読みやすいコード」を書くための要素をまとめてみました！</p>

<!-- more -->


<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h2>プリンシパル</h2>

<p>コードは理解しやすさが<strong>とても大切</strong>。なぜならコーディングでは、コードを書く時間よりもコードを読む時間の方が多いから。見た瞬間に何をしているかを理解できれば効率はずっと良くなる。</p>

<p>ループやロジックをシンプルに保つ。コードの<strong>読み手が立ち止まらない</strong>ように細心の注意を払う。読み手を助け、自分のバグを防ぐことができる。</p>

<p><strong>テスト大切</strong>。他のプログラマが安心してテストの追加・変更ができるようにテストコードを読みやすくする。</p>

<h2>名前で他の人が最短時間で理解できるようにコードを書く</h2>

<ul>
<li>モージュール名、クラス名、変数名を<strong>短いコメントと考えて</strong>情報を埋め込む</li>
<li>相手に意図を伝えるために名前は具体的にする。<strong>読み違え</strong>を防ぐ</li>
<li>エンティティの<strong>目的や値</strong>が明確になるようにする</li>
<li>変数名に<strong>値の単位や制限、危険・注意を喚起する情報</strong>を載せる</li>
<li>変数の<strong>スコープ</strong>を意識する。スコープの大きな変数には長い名前をつける</li>
<li>プロジェクトや言語の規約を守る。*フォーマットをうまく活用する**</li>
</ul>


<h2>一貫性のあるやり方で「整形」する</h2>

<ul>
<li>コードの列を揃える(<strong>縦に揃える</strong>)、<strong>適切な位置で改行</strong>する</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 例)</span>
</span><span class='line'><span class="nx">TcpConnectionSimulator</span><span class="p">(</span>
</span><span class='line'>  <span class="mi">500</span><span class="p">,</span>  <span class="err">/&lt;em&gt; Kbps &lt;/em&gt;/</span>
</span><span class='line'>  <span class="mi">80</span><span class="p">,</span>   <span class="err">/&lt;em&gt; millisecs latency &lt;/em&gt;/</span>
</span><span class='line'>  <span class="mi">200</span><span class="p">,</span>  <span class="err">/&lt;em&gt; jitter &lt;/em&gt;/</span>
</span><span class='line'>  <span class="mi">1</span>     <span class="o">/&lt;</span><span class="nx">em</span><span class="o">&gt;</span> <span class="nx">packet</span> <span class="nx">loss</span> <span class="o">&lt;</span><span class="sr">/em&gt;/</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>並び順に<strong>一貫した</strong>ルールを持つ(アルファベット順、種類別、重要度など)</li>
<li>空行を使ってコードを<strong>論理的な段落、似ているグループ</strong>に分ける</li>
</ul>


<h2>コメントは読み手に意図を知らせるためにある</h2>

<ul>
<li>コードを書いている時の<strong>自分の考え</strong>を記録する</li>
<li><strong>コードの欠陥・ハマりそうな罠</strong>を知らせる(TODO/FIXME/HACK/XXXなど)</li>
<li>読む人が<strong>質問</strong>しそうなことを書いておく</li>
<li>全体像を<strong>要約</strong>したコメントを残す</li>
<li>コメントの曖昧さを排除する、動作を明確に記述する(<strong>実例</strong>を残す)</li>
</ul>


<h2>制御フローを読みやすくする</h2>

<ul>
<li>条件式は左側に<strong>変化する</strong>値、右側にあまり<strong>変化しない</strong>値を置く</li>
<li>基本は、if/elseを使う。三項演算子は<strong>簡潔</strong>になる時だけ使う</li>
<li>関数からできる限り<strong>早く返す</strong></li>
<li>ネストを<strong>浅くする</strong>ことで、読み手の負荷を減らす</li>
<li>巨大な式は<strong>分割</strong>して、読み手が1つ1つ飲み込めるようにする</li>
</ul>


<h2>変数と読みやすさとの関係</h2>

<ul>
<li>コードの理解を助けない邪魔な変数は作らない</li>
<li>変数の<strong>スコープを小さくする</strong>(変数が見えるコードの行数をできるだけ短くする)</li>
<li>変数を操作する場所をできるだけ減らす</li>
</ul>


<h2>読みやすさを意識したリファクタリング</h2>

<ul>
<li><strong>ライブラリ</strong>(標準ライブラリ、APIやパッケージ)を有効に活用する</li>
<li>ロジックを<strong>簡単な言葉</strong>で説明できるようなコードにする</li>
<li><strong>一度に1つのことだけ処理する</strong>ように関数(クラス)を分割する</li>
<li>できるだけコードを<strong>小さく保つ</strong>、必要になるまで作らない(You Ain't Gonna Need It./YAGNI)</li>
<li><strong>汎用的なコード</strong>を独立したライブラリにすることで、プロジェクトを小さく保つ</li>
</ul>


<h2>テストを読みやすくする</h2>

<ul>
<li><strong>テストにやさしいコードを設計</strong>する</li>
<li>テストコードは<strong>最小</strong>に保つ</li>
<li><strong>バグの発見・修正</strong>が容易になるように、エラーメッセージを読みやすくする</li>
<li>コードを完全にテストする最も<strong>単純</strong>な入力をテストに使う</li>
<li>テストの関数に<strong>名前</strong>をつけて、何をテストしているかわかるようにする</li>
</ul>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>
]]></content>
  </entry>
  
</feed>
