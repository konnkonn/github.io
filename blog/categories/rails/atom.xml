<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2015-07-20T14:03:56+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Everyday Rails RSpecによるRailsテスト入門でRSpec3に再入門！[書評]]]></title>
    <link href="http://morizyun.github.io/blog/everyday-rails-beginner-rspec-book-review/"/>
    <updated>2015-01-12T22:30:00+09:00</updated>
    <id>http://morizyun.github.io/blog/everyday-rails-beginner-rspec-book-review</id>
    <content type="html"><![CDATA[<p><a href="https://leanpub.com/everydayrailsrspec-jp" title="large by morizyun, on Flickr"><img src="https://farm8.staticflickr.com/7565/16219331906_8d9010083f_o.png" width="150" style="float: left; margin: 0 20px 20px 0;" alt="large"></a>『<strong><a href="https://leanpub.com/everydayrailsrspec-jp">Everyday Rails - RSpecによるRailsテスト入門</a></strong>』
が、RSpec3に対応したとの噂を聞いて1年ぶりに読み直しました。この書籍は著者や訳者さんが、しっかりとアップデートを続けてくれているので、最新の入門チュートリアル
としてRspecの実践的な使い方が習得できる素晴らしい本です。</p>

<p>今回は『<strong><a href="https://leanpub.com/everydayrailsrspec-jp">Everyday Rails - RSpecによるRailsテスト入門</a></strong>』
を読んでいく中で、特に印象に残った部分を中心にピックアップしていきます。ブログ駆動勉強ですw</p>

<!-- more -->


<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h2>Everyday Railsのサンプルソース</h2>

<p><strong><a href="https://github.com/everydayrails/rspec_rails_4">everydayrails/rspec_rails_4 - GitHub</a></strong></p>

<p>この書籍ではできるだけRspecやテストに集中できるようにサンプルソースが用意されています。しかもRails4対応と至れり尽くせりです。素晴らしい！
ターミナルで以下のコマンドを実行すると、ローカルにソースコードをダウンロードできます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/everydayrails/rspec_rails_4.git
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>自分でコードを書く</h2>

<p>勉強をするときにコピペをするのではなく、自分でコードをタイピングしていくべき。
これは最近学習によって得られる知識がかなり変わることを実感しているのですごく共感できます！</p>

<h2>テスト設計について</h2>

<p>TDDで動くコードを書く前にRSpecのexample(itで始まる行)まで書いてテスト設計する。
いつもテストが先か、コードが先かで悩んでいました。この理由の一つは動かない状態のテストの設計をどこに
書くかでしたが、この本を読んでいく中でこういうふうに先に設計すればTDDの流れの中で開発できるんだと感激ました＾＾</p>

<h2>絶対に覚えておきたいRSpecを書くときの基本</h2>

<pre>
* Specアウトラインをベースに考える
* example(itで始まる行)は原因究明しやすいように結果を1つに絞る
* 期待する結果は能動形、具体的に記述すること
* 「起きてほしいこと、起きてほしくないこと」の両方のテストを書くこと
* 境界値テストをすること
* スペックの可読性を高めることに努めること
</pre>


<h2>コントローラスペックについて</h2>

<p>feature specに比べてコントローラスペックのほうが、少ないコストでテストできる。
コントローラのテストは、自動生成されていないコードで、テストにコストをかけて効果が高そうなものを選定するといい。
その結果しっかりテストされたコントローラがあれば、アプリ全体のテスト網羅率を向上させることができる。</p>

<h2>FactoryGirlのテクニック</h2>

<p>以下のようにファクトリを書くことで、<code>home_phone</code>と<code>work_phone</code>を使わける事ができます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:phone</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;association :contact</span>
</span><span class='line'><span class="sr">phone &#39;123-555-1234&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">factory :home_phone do</span>
</span><span class='line'><span class="sr">  phone_type: &#39;home&#39;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">factory :work_phone do</span>
</span><span class='line'><span class="sr">  phone_type: &#39;work&#39;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>また、『<strong><a href="https://github.com/stympy/faker">stympy/faker</a></strong>』を使うと、
住所やURL、メールアドレスなどのリアルなダミーデータを生成してくれます。</p>

<p>ただ日本語のふりがななどに対応しようと思うと『<strong><a href="https://github.com/willnet/gimei">willnet/gimei</a></strong>』
がオススメです。日本語のリアルな住所を組み合わせたダミーデータも簡単に作成する事ができます。</p>

<p>FactoryGirlはテストを遅くすることがあるそうなので、必要なときに適切に使う事が重要とのことです。</p>

<h2>shared_examples</h2>

<p><code>shared_exmamples</code>とは、いくつかのテストをグループ化して、メソッドのように何度も呼び出せる機能です。
下は公式サンプルのテストですが、これを見るとひと目でわかると思います！</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;set&quot;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;RSpec.shared_examples &quot;a collection&quot; do</span>
</span><span class='line'><span class="sr">  let(:collection) { described_class.new([7, 2, 4]) }&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">context</span> <span class="s2">&quot;initialized with 3 items&quot;</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;it &quot;says it has three items&quot; do</span>
</span><span class='line'><span class="sr">  expect(collection.size).to eq(3)</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">context</span> <span class="s2">&quot;with an an item that is in the collection&quot;</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;it &quot;returns true&quot; do</span>
</span><span class='line'><span class="sr">  expect(collection.include?(7)).to be_truthy</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">RSpec</span><span class="o">.</span><span class="n">describe</span> <span class="nb">Array</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># ↓shared_examplesを関数のように呼び出している</span>
</span><span class='line'>  <span class="n">it_behaves_like</span> <span class="s2">&quot;a collection&quot;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;=&gt; Array&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span>   <span class="n">behaves</span> <span class="n">like</span> <span class="n">a</span> <span class="n">collection</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;=&gt;     initialized with 3 items&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span>       <span class="n">says</span> <span class="n">it</span> <span class="n">has</span> <span class="n">three</span> <span class="n">items</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;=&gt;     with an an item that is in the collection&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span>       <span class="n">returns</span> <span class="kp">true</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;RSpec.describe Set do</span>
</span><span class='line'><span class="sr">  # ↓shared_examplesを関数のように呼び出している</span>
</span><span class='line'><span class="sr">  it_behaves_like &quot;a collection&quot;</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="no">Set</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;=&gt;   behaves like a collection&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span>     <span class="n">initialized</span> <span class="n">with</span> <span class="mi">3</span> <span class="n">items</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;=&gt;       says it has three items&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span>     <span class="n">with</span> <span class="n">an</span> <span class="n">an</span> <span class="n">item</span> <span class="n">that</span> <span class="n">is</span> <span class="k">in</span> <span class="n">the</span> <span class="n">collection</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;=&gt;       returns true&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>FactoryGirlでローカルのファイルを指定する方法</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;ローカルのファイルを指定する方法&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:user</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;avatar { File.new(&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="sr">/s</span><span class="n">pec</span><span class="o">/</span><span class="n">factories</span><span class="o">/</span><span class="n">avatar</span><span class="o">.</span><span class="n">png</span><span class="s2">&quot;) }</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end</span>
</span><span class='line'><span class="s2">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Rspecの便利マッチャー</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;正規表現でのチェック&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">expect</span><span class="p">(</span><span class="s2">&quot;a string&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">not_to</span> <span class="n">match</span> <span class="sr">/a regex/</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;配列のチェック&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">expect</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">match_array</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>テストで特定の時間を指定する方法</h2>

<p><strong><a href="https://github.com/travisjeffery/timecop">travisjeffery/timecop - GitHub</a></strong></p>

<p>特定の曜日や日にちに依存する処理がある場合に、そのテストをすることができる。また、時間を止めることができるのでタイムスタンプが正しく動いているかのテストなどができる。</p>

<h2>メールのテスト</h2>

<p><strong><a href="https://github.com/bmabey/email-spec/">bmabey/email-spec -GitHub</a></strong></p>

<p>EmailについてテストをするためのGem。知らなかったけどこれはすごい使えそう。今度試してみます！</p>

<h2>RSpec 3初心者向けの資料まとめ</h2>

<p><strong><a href="/blog/rspec3-beginner-bdd-tdd-test-first">RSpec 3初心者向けの資料まとめ[Ruby]</a></strong></p>

<p>ちなみにその他のTDDやRSpecの入門記事も書いています。こちらも良ければ是非読んでみてください＾＾</p>

<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h2>変更来歴</h2>

<p>(2015-01-12 22:30) 既存記事から分離して新規作成<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fog + carrierwaveでAWS S3に画像をアップロード]]></title>
    <link href="http://morizyun.github.io/blog/carrierwave-fog-s3-upload-aws/"/>
    <updated>2014-08-08T22:15:00+09:00</updated>
    <id>http://morizyun.github.io/blog/carrierwave-fog-s3-upload-aws</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774165166/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774165166&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774165166&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774165166" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
『<strong><a href="https://github.com/fog/fog">fog</a></strong>』はRubyのクラウドサービス向けのライブラリ(gem)です。
このfogと「<strong><a href="https://github.com/carrierwaveuploader/carrierwave">carrierwave</a></strong>」を使うと、ユーザー向けの画像アップロードフォーム => S3への画像アップロードが、超簡単に実装できてしまいます！</p>

<p>「<strong><a href="http://morizyun.github.io/blog/short.works-parttimer-sidejob-iphone-app/">アルバイトを10秒で探せるiPhone/Androidアプリ Short.Works</a></strong>」でも画像アップロードの部分に活用しています！</p>

<!-- more -->


<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h2>目次</h2>

<p>今回はcarriewave + Rails 4.1にfogを追加してS3にアップロードする部分を中心に説明します。</p>

<pre>
1) AWS でアクセスキーとシークレットキーを取得
2) S3 のブラケット作成
3) Carrierwave + Railsの基本実装
4) fogの導入(gem)
5) アップローダー(xxx_uploader.rb)の実装
6) carrierwave 設定ファイルの実装
</pre>


<h2>1) AWS でアクセスキーとシークレットキーを取得</h2>

<p>「<strong><a href="http://aws.amazon.com/jp/console/">AWSのコンソール</a></strong>」にログイン。</p>

<p>AWSにログインしたら右の自分のユーザー名 => <code>Security Credencial</code>を選択。</p>

<p><img src="https://farm6.staticflickr.com/5580/14851160675_37732ec8a3_z.jpg" width="640" height="348" alt="スクリーンショット_2014-08-07_21_04_19"></p>

<p>その中で、アクセスキーとシークレットキーを選択・作成。</p>

<p><img src="https://farm4.staticflickr.com/3859/14851143595_d2b31afcb8_z.jpg" width="640" height="351" alt="aws console"></p>

<p>このコードをあとでRails側で設定します。</p>

<h2>2) S3 のバケット作成</h2>

<p>S3のバケット(Bucket)を作成します。まずはS3を選択。</p>

<p><img src="https://farm4.staticflickr.com/3867/14875686133_c655bc19d8_z.jpg" width="640" height="349" alt="スクリーンショット_2014-08-08_9_58_41"></p>

<p>S3でバケットを作成。</p>

<p><img src="https://farm4.staticflickr.com/3897/14669129150_af82e98148_z.jpg" width="640" height="348" alt="スクリーンショット_2014-08-08_10_02_39"></p>

<h2>3) Carrierwave + Railsの基本実装</h2>

<p>Carrierwave + Rails 4.1での基本的な実装は拙著『<strong><a href="http://morizyun.github.io/blog/carrierwave-image-uploader-rails/">Carrierwave + Rails 4.1 画像アップローダー</a></strong>』をご参照頂ければ幸いです！</p>

<p>ここでは、上記の実装まで完了している前提で、<code>fog</code>を組み込む部分を中心に説明を書いていきます。</p>

<h2>4) fogの導入(gem)</h2>

<p>Gemfileに以下を追加して、<code>bundle install</code>を実行。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;fog&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>5) アップローダー(xxx_uploader.rb)の実装</h2>

<p><code>uploaders/xxx_uploader.rb</code>を以下のように変更。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">storage</span> <span class="ss">:file</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;↓ 以下のように変更&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">storage</span> <span class="ss">:fog</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>6) carrierwave 設定ファイルの実装</h2>

<p><code>config/initialize/carrierwave.rb</code>のファイルを作成して以下のように記述。</p>

<p>ACCESS_KEYとSECRET_KEYは「1) AWS でアクセスキーとシークレットキーを取得」で取得したものを貼り付け。</p>

<p>リージョンは『<strong><a href="http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region">Regions and Endpoints - Amazon Web Services</a></strong>』を参照。ちなみに東京リージョンなら<code>ap-northeast-1</code>。</p>

<p><code>config.fog_directory</code>や<code>config.asset_host</code>には、S3のバケットの名前を入れる。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">CarrierWave</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">fog_credentials</span> <span class="o">=</span> <span class="p">{</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  :provider               =&amp;gt; &#39;AWS&#39;,</span>
</span><span class='line'><span class="sr">  :aws_access_key_id      =&amp;gt; &#39;ACCESS_KEY&#39;,</span>
</span><span class='line'><span class="sr">  :aws_secret_access_key  =&amp;gt; &#39;SECRET_KEY&#39;,</span>
</span><span class='line'><span class="sr">  :region                 =&amp;gt; &#39;REGION&#39;,</span>
</span><span class='line'><span class="sr">  :path_style             =&amp;gt; true,</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  }&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">config</span><span class="o">.</span><span class="n">fog_public</span>     <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">fog_attributes</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;Cache-Control&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;public, max-age=86400&#39;</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  case Rails.env&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">when</span> <span class="s1">&#39;production&#39;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">fog_directory</span> <span class="o">=</span> <span class="s1">&#39;example.com&#39;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">asset_host</span> <span class="o">=</span> <span class="s1">&#39;https://s3-ap-northeast-1.amazonaws.com/example.com&#39;</span>
</span><span class='line'><span class="k">when</span> <span class="s1">&#39;staging&#39;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">fog_directory</span> <span class="o">=</span> <span class="s1">&#39;stg.example.com&#39;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">asset_host</span> <span class="o">=</span> <span class="s1">&#39;https://s3-ap-northeast-1.amazonaws.com/stg.example.com&#39;</span>
</span><span class='line'><span class="k">when</span> <span class="s1">&#39;development&#39;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">fog_directory</span> <span class="o">=</span> <span class="s1">&#39;dev.example.com&#39;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">asset_host</span> <span class="o">=</span> <span class="s1">&#39;https://s3-ap-northeast-1.amazonaws.com/dev.example.com&#39;</span>
</span><span class='line'><span class="k">when</span> <span class="s1">&#39;test&#39;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">fog_directory</span> <span class="o">=</span> <span class="s1">&#39;test.example.com&#39;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">asset_host</span> <span class="o">=</span> <span class="s1">&#39;https://s3-ap-northeast-1.amazonaws.com/test.example.com&#39;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>これで画像がS3にアップロードされるようになるはずデス！</p>

<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h2>Special Thanks</h2>

<p><a href="http://www.workabroad.jp/posts/1186">RailsとCarrierWaveでAmazon S3に画像を保存する | Workabroad.jp</a></p>

<p><a href="http://blog.cloudpack.jp/2014/08/04/allow-other-account-to-write-to-amazon-s3/">Amazon S3に別アカウントから書き込みを許可する場合の設定 | cloudpack技術情報サイト</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[test-kitchenでインフラのTDDに挑戦[Rails/Nginx/MySQL/rbenv]]]></title>
    <link href="http://morizyun.github.io/blog/test-kitchen-vagrant-rails-rbenv-chef-serverspec/"/>
    <updated>2014-05-02T08:35:00+09:00</updated>
    <id>http://morizyun.github.io/blog/test-kitchen-vagrant-rails-rbenv-chef-serverspec</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774162868/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774162868&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774162868&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774162868" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />これまでVagrantやChefをつかってインフラのコード化を勉強してきましたが、今回は更に一歩進めてserverspecを使ったインフラのテストと、『<strong><a href="http://kitchen.ci/">test-kitchen</a></strong>』を使ったTDDにチャレンしてみました！</p>

<p>慣れてくるとtest-kitchenの<code>コマンドで設定をやり直し => インフラのテスト</code>がソースコードを書くような感覚で、インフラを構築できるのがすごく心地よかったです。</p>

<p>ようやくですが、localのvagrantと『<strong><a href="https://aws.amazon.com/jp/ec2/?nc1=f_ls">AWS EC2</a></strong>』、『<strong><a href="https://www.digitalocean.com/">Degital Ocean</a></strong>』に対応しました。コマンド一つでChefを適用したり、serverspecでリモートの環境をテストすることができます！</p>

<p><strong>(05-02 08:35) Rubyサーバ・デプロイまでのチェックリストを追加</strong></p>

<!-- more -->


<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h2>今回のソースコード</h2>

<p>Vagrant/Degital Oclean/AWS EC2上にNginx/MySQL/rbenv/Ruby 2.1.0/Ubuntu 12.04のおなじみのサーバ構成の構築/テストを行うtest-kitchenのソースコードをGitHubに公開しました。また、Vagrant x CentOS 6.5 /Nginx/MySQL/rbenv/Ruby 2.1.0も作成しました。</p>

<p><strong><a href="https://github.com/morizyun/test-kitchen-rails">morizyun/test-kitchen-rails</a></strong></p>

<p>手っ取り早くVagrantでRailsサーバを立ち上げたり、serverspecでテストしてみたい方は是非使ってみてください！Pull Requestも大歓迎です＾＾</p>

<h2>環境準備</h2>

<h3>Vagrant</h3>

<p><strong><a href="http://www.vagrantup.com/">Vagrant 公式サイト</a></strong><br/>
パッケージをDLしてインストール。</p>

<p>vagrantをインストールしたら、boxでchefを使えるようにするためのプラグインをインストール。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant plugin install vagrant-omnibus
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>VirtualBox</h3>

<p><strong><a href="https://www.virtualbox.org/">VirtualBox 公式サイト</a></strong><br/>
パッケージをDLしてインストール。</p>

<h2>簡単なtest-kitchen環境の作り方</h2>

<h3>Cookbookの作成</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>berks cookbook <span class="nb">test</span>-kitchen &amp;amp;&amp;amp; <span class="nb">cd test</span>-kitchen
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Gemfileのセットアップ</h3>

<p>次に<code>vim Gemfile</code>でセットアップ。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;gem <span class="s1">&#39;berkshelf&#39;</span>
</span><span class='line'>gem <span class="s1">&#39;foodcritic&#39;</span>
</span><span class='line'>gem <span class="s1">&#39;rubocop&#39;</span>
</span><span class='line'>gem <span class="s1">&#39;busser&#39;</span>
</span><span class='line'>gem <span class="s1">&#39;serverspec&#39;</span>
</span><span class='line'>gem <span class="s1">&#39;dotenv&#39;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;test-kitchen&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;gem <span class="s1">&#39;test-kitchen&#39;</span>
</span><span class='line'>gem <span class="s1">&#39;kitchen-vagrant&#39;</span>
</span><span class='line'>gem <span class="s1">&#39;kitchen-digitalocean&#39;</span>
</span><span class='line'>gem <span class="s1">&#39;kitchen-ec2&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>完了したらbundlerでgemを導入。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle install --binstubs<span class="o">=</span>bin
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>vim bin/kitchen</code>でdotenvを読み込むように設定を追記。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>require <span class="s1">&#39;dotenv&#39;</span>
</span><span class='line'>Dotenv.load
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>この設定は本来は良くないと思います。<code>bundle install</code>のたびに設定を描き直さないといけないので、もっといい方法があれば是非教えて下さい！</p>

<h3>busserプラグインの設定</h3>

<p>次にプラグインの設定。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>busser plugin install serverspec
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Berksfileのセットアップ</h3>

<p><code>vim Berksfile</code>でBerkshelfの設定。<br/>
(まだ試行錯誤中なので、最新はGitHubをご参照ください)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>site :opscode&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;metadata&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;cookbook <span class="s2">&quot;apt&quot;</span>,
</span><span class='line'>  git: <span class="s2">&quot;https://github.com/opscode-cookbooks/apt.git&quot;</span>
</span><span class='line'>cookbook <span class="s2">&quot;build-essential&quot;</span>,
</span><span class='line'>  git: <span class="s2">&quot;https://github.com/opscode-cookbooks/build-essential.git&quot;</span>
</span><span class='line'>cookbook <span class="s2">&quot;git&quot;</span>,
</span><span class='line'>  git: <span class="s2">&quot;https://github.com/opscode-cookbooks/git.git&quot;</span>
</span><span class='line'>cookbook <span class="s2">&quot;nginx&quot;</span>,
</span><span class='line'>  git: <span class="s2">&quot;https://github.com/opscode-cookbooks/nginx.git&quot;</span>
</span><span class='line'>cookbook <span class="s2">&quot;vim&quot;</span>,
</span><span class='line'>  git: <span class="s2">&quot;https://github.com/opscode-cookbooks/vim.git&quot;</span>
</span><span class='line'>cookbook <span class="s2">&quot;mysql&quot;</span>,
</span><span class='line'>  git: <span class="s2">&quot;https://github.com/myplanetdigital-experimental/chef-mysql.git&quot;</span>
</span><span class='line'>cookbook <span class="s1">&#39;rbenv&#39;</span>,
</span><span class='line'>  git: <span class="s2">&quot;https://github.com/fnichol/chef-rbenv.git&quot;</span>
</span><span class='line'>cookbook <span class="s1">&#39;database&#39;</span>,
</span><span class='line'>  git: <span class="s2">&quot;https://github.com/opscode-cookbooks/database.git&quot;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;cookbook <span class="s1">&#39;base&#39;</span>, path: <span class="s1">&#39;site-cookbooks/base&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>設定画完了したら、Berkshelfの設定を反映。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle <span class="nb">exec </span>berks vendor cookbooks
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h3>.kitchen.ymlの設定</h3>

<p><code>vim .kitchen.yml</code>でtest-kitchen用の設定。</p>

<h2><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;provisioner:
</span><span class='line'>  name: chef_solo&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;driver_config:
</span><span class='line'>  require_chef_omnibus: <span class="nb">true</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;platforms:
</span><span class='line'>  - name: va-ubuntu-12.04&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;driver:
</span><span class='line'>  name: vagrant
</span><span class='line'>  network:
</span><span class='line'>    - <span class="o">[</span><span class="s2">&quot;private_network&quot;</span>, <span class="o">{</span>ip: <span class="s2">&quot;192.168.33.33&quot;</span><span class="o">}]</span>
</span><span class='line'>  synced_folders:
</span><span class='line'>    - <span class="o">[</span><span class="s2">&quot;vagrant&quot;</span>, <span class="s2">&quot;/usr/share/nginx&quot;</span>, <span class="s2">&quot;create: true, type: :nfs&quot;</span><span class="o">]</span>
</span><span class='line'>provider: virtualbox
</span><span class='line'>driver_config:
</span><span class='line'>  box: opscode-ubuntu-12.04
</span><span class='line'>  box_url: https://opscode-vm.s3.amazonaws.com/vagrant/opscode_ubuntu-12.04_provisionerless.box
</span><span class='line'>  customize:
</span><span class='line'>    memory: 1024
</span><span class='line'>    cpuexecutioncap: 100
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt; name: va-centos-6.5
</span><span class='line'>driver:
</span><span class='line'>  name: vagrant
</span><span class='line'>  network:
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;- <span class="o">[</span><span class="s2">&quot;private_network&quot;</span>, <span class="o">{</span>ip: <span class="s2">&quot;192.168.33.32&quot;</span><span class="o">}]</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>  synced_folders:
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;- <span class="o">[</span><span class="s2">&quot;vagrant&quot;</span>, <span class="s2">&quot;/usr/share/nginx&quot;</span>, <span class="s2">&quot;create: true, type: :nfs&quot;</span><span class="o">]</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;driver_config:
</span><span class='line'>  box: opscode-centos-6.5
</span><span class='line'>  box_url: http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_centos-6.5_chef-provisionerless.box&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;suites:
</span><span class='line'>  - name: rails&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;run_list:
</span><span class='line'>  - recipe<span class="o">[</span>base::prepare<span class="o">]</span>
</span><span class='line'>  - recipe<span class="o">[</span>build-essential<span class="o">]</span>
</span><span class='line'>  - recipe<span class="o">[</span>git<span class="o">]</span>
</span><span class='line'>  - recipe<span class="o">[</span>vim<span class="o">]</span>
</span><span class='line'>  - recipe<span class="o">[</span>nginx<span class="o">]</span>
</span><span class='line'>  - recipe<span class="o">[</span>mysql::server<span class="o">]</span>
</span><span class='line'>  - recipe<span class="o">[</span>mysql::client<span class="o">]</span>
</span><span class='line'>  - recipe<span class="o">[</span>ruby_build<span class="o">]</span>
</span><span class='line'>  - recipe<span class="o">[</span>rbenv::system<span class="o">]</span>
</span><span class='line'>  - recipe<span class="o">[</span>base<span class="o">]</span>
</span><span class='line'>  - recipe<span class="o">[</span>base::rails<span class="o">]</span>
</span><span class='line'>attributes:
</span><span class='line'>  git:
</span><span class='line'>    version: 1.9.1
</span><span class='line'>  nginx:
</span><span class='line'>    application_name: <span class="s1">&#39;sample&#39;</span>
</span><span class='line'>  mysql:
</span><span class='line'>    server_debian_password: <span class="s2">&quot;passw0rd&quot;</span>
</span><span class='line'>    server_root_password: <span class="s2">&quot;passw0rd&quot;</span>
</span><span class='line'>    server_repl_password: <span class="s2">&quot;passw0rd&quot;</span>
</span><span class='line'>  rbenv:
</span><span class='line'>    rubies: <span class="o">[</span><span class="s1">&#39;2.1.0&#39;</span><span class="o">]</span>
</span><span class='line'>    global: <span class="s1">&#39;2.1.0&#39;</span>
</span><span class='line'>    gems:
</span><span class='line'>      <span class="s1">&#39;2.1.0&#39;</span>:
</span><span class='line'>        - name: <span class="s1">&#39;bundler&#39;</span>
</span><span class='line'>          options: <span class="s1">&#39;--no-ri --no-rdoc&#39;</span>
</span><span class='line'>        - name: <span class="s1">&#39;gem&#39;</span>
</span><span class='line'>          options: <span class="s1">&#39;--no-ri --no-rdoc&#39;</span>
</span><span class='line'>        - name: <span class="s1">&#39;rails&#39;</span>
</span><span class='line'>          options: <span class="s1">&#39;--no-ri --no-rdoc&#39;</span>
</span><span class='line'>        - name: <span class="s1">&#39;rake&#39;</span>
</span><span class='line'>          options: <span class="s1">&#39;--no-ri --no-rdoc&#39;</span>
</span><span class='line'>        - name: <span class="s1">&#39;therubyracer&#39;</span>
</span><span class='line'>          options: <span class="s1">&#39;--no-ri --no-rdoc&#39;</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Vagrant/Ubuntu編</h2>

<p>まずはvagrantでローカルにubuntuを立ち上げます。</p>

<h3>セットアップ</h3>

<p>vagrantのセットアップを行います。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kitchen setup rails-va-ubuntu-1204
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>servespecテスト</h3>

<p>serverspecで立ち上げたvagrantのテストを行います。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kitchen verify rails-va-ubuntu-1204&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;次のように出れば成功&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Finished in seconds&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;15 examples, 0 failures&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Finished verifying &lt;rails-va-ubuntu-1204&gt;&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;-----&gt; Kitchen is finished&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Vagrant/CentOS編</h2>

<p>まずはvagrantでローカルにCentOSを立ち上げます。</p>

<h3>セットアップ</h3>

<p>vagrantのセットアップを行います。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kitchen setup rails-va-centos-65
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>servespecテスト</h3>

<p>serverspecで立ち上げたvagrantのテストを行います。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kitchen verify rails-va-centos-65&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;次のように出れば成功&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Finished in seconds&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;15 examples, 0 failures&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Finished verifying &lt;rails-va-ubuntu-1204&gt;&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;-----&gt; Kitchen is finished&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Degital Ocean編</h2>

<p>次は『<strong><a href="https://www.digitalocean.com/">Degital Ocean</a></strong>』に鯖を立ち上げます。</p>

<h3>事前準備</h3>

<p>以下、『<strong><a href="https://www.digitalocean.com/">Degital Ocean</a></strong>』での作業。</p>

<pre>
1) Degital Oceanでユーザー登録
2) ユーザー画面内の左メニュー「Billing」からPayPalで$5を支払い
3) ユーザー画面内の左メニュー「API」で"Client ID"と"API Key"を作成
4) ユーザー画面内の左メニュー「SSH Keys」でSSHキーを登録
</pre>


<p>事前準備で取得した"Client ID"と"API Key"を元にSSH Key IDを取得。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget -q -O- https://api.digitalocean.com/ssh_keys/?client_id<span class="o">=[</span>Client ID<span class="o">]</span>&amp;amp;api_key<span class="o">=[</span>API Key<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>登録した情報を.envに登録</h3>

<p>取得した情報を<code>vim .env</code>で登録。DIGITALOCEAN_SSH_KEY_PATHにはDegital Oceanに登録したSSHキーの秘密鍵へのパスを設定。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">DIGITALOCEAN_CLIENT_ID</span><span class="o">=</span><span class="s2">&quot;1234&quot;</span>
</span><span class='line'><span class="nv">DIGITALOCEAN_API_KEY</span><span class="o">=</span><span class="s2">&quot;5678&quot;</span>
</span><span class='line'><span class="nv">SSH_KEY_IDS</span><span class="o">=</span><span class="s2">&quot;1234, 5678&quot;</span>
</span><span class='line'><span class="nv">DIGITALOCEAN_SSH_KEY_PATH</span><span class="o">=</span><span class="s2">&quot;~/.ssh/id_rsa&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>.kitchen.ymlを設定</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>platforms:
</span><span class='line'>  - name: <span class="k">do</span>-ubuntu-12.04&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;driver:
</span><span class='line'>  name: digitalocean
</span><span class='line'>  ssh_key: &amp;lt;%<span class="o">=</span> ENV<span class="o">[</span><span class="s1">&#39;DIGITALOCEAN_SSH_KEY_PATH&#39;</span><span class="o">]</span> %&amp;gt;
</span><span class='line'>driver_config:
</span><span class='line'>  image_id: 3101045
</span><span class='line'>  region: San Francisco 1
</span><span class='line'>  flavor: 512MB
</span><span class='line'>  private_networking: <span class="nb">false</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>セットアップ</h3>

<p>Degital Oceanのインスタンスのセットアップを行います。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kitchen setup rails-do-ubuntu-1204
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Degital Oceanのユーザー画面内の左メニュー「Droplets」で立ち上がっているインスタンスを確認することができます。</p>

<p><img src="https://farm4.staticflickr.com/3774/13790615893_c5e211f897.jpg" width="500" height="282" alt="スクリーンショット_2014-04-12_12_38_11"></p>

<h3>servespecテスト</h3>

<p>serverspecで立ち上げたvagrantのテストを行います。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kitchen verify rails-do-ubuntu-1204&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;次のように出れば成功&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Finished in seconds&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;15 examples, 0 failures&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Finished verifying &lt;rails-do-ubuntu-1204&gt;&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;-----&gt; Kitchen is finished&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>AWS EC2編</h2>

<p>次は『<strong><a href="https://aws.amazon.com/jp/ec2/?nc1=f_ls">AWS EC2</a></strong>』に鯖を立ち上げます。</p>

<h3>事前準備</h3>

<p>以下、『<strong><a href="https://aws.amazon.com/jp/ec2/?nc1=f_ls">AWS EC2</a></strong>』での作業。</p>

<pre>
1) AWS EC2でユーザー登録
2) EC2 => 自分が作成するリージョン(Tokyo)でセキュリティグループを作成
3) EC2 => Key Pairで鍵を作成(もしくはImportして登録)
4) 右上のメニュー「Security Credential」=> Access Keyを作成
</pre>


<h3>登録した情報を.envに登録</h3>

<p>取得した情報を<code>vim .env</code>で登録。DIGITALOCEAN_SSH_KEY_PATHにはDegital Oceanに登録したSSHキーの秘密鍵へのパスを設定。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">AWS_ACCESS_KEY_ID</span><span class="o">=</span><span class="s2">&quot;xxxx&quot;</span>
</span><span class='line'><span class="nv">AWS_FLAVOR_ID</span><span class="o">=</span><span class="s2">&quot;m1.small&quot;</span>
</span><span class='line'><span class="nv">AWS_IMAGE_ID</span><span class="o">=</span><span class="s2">&quot;ami-f397eef2&quot;</span>
</span><span class='line'><span class="nv">AWS_SECRET_ACCESS_KEY</span><span class="o">=</span><span class="s2">&quot;xxxx&quot;</span>
</span><span class='line'><span class="nv">AWS_SECURITY_GROUP_ID</span><span class="o">=</span><span class="s2">&quot;sg-xxxxx&quot;</span>
</span><span class='line'><span class="nv">AWS_SSH_KEY</span><span class="o">=</span><span class="s2">&quot;~/.ssh/aws.pem&quot;</span>
</span><span class='line'><span class="nv">AWS_SSH_KEY_ID</span><span class="o">=</span><span class="s2">&quot;xxxx&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>.kitchen.ymlを設定</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>platforms:
</span><span class='line'>  - name: ec2-ubuntu-12.04&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;driver:
</span><span class='line'>  name: ec2
</span><span class='line'>  region:  ap-northeast-1
</span><span class='line'>  availability_zone: ap-northeast-1c
</span><span class='line'>  flavor_id: &amp;lt;%<span class="o">=</span> ENV<span class="o">[</span><span class="s1">&#39;AWS_FLAVOR_ID&#39;</span><span class="o">]</span> %&amp;gt;
</span><span class='line'>  image_id: &amp;lt;%<span class="o">=</span> ENV<span class="o">[</span><span class="s1">&#39;AWS_IMAGE_ID&#39;</span><span class="o">]</span> %&amp;gt;
</span><span class='line'>  aws_ssh_key_id: &amp;lt;%<span class="o">=</span> ENV<span class="o">[</span><span class="s1">&#39;AWS_SSH_KEY_ID&#39;</span><span class="o">]</span> %&amp;gt;
</span><span class='line'>  aws_access_key_id: &amp;lt;%<span class="o">=</span> ENV<span class="o">[</span><span class="s1">&#39;AWS_ACCESS_KEY_ID&#39;</span><span class="o">]</span> %&amp;gt;
</span><span class='line'>  ssh_key: &amp;lt;%<span class="o">=</span> ENV<span class="o">[</span><span class="s1">&#39;AWS_SSH_KEY&#39;</span><span class="o">]</span> %&amp;gt;
</span><span class='line'>  aws_secret_access_key: &amp;lt;%<span class="o">=</span> ENV<span class="o">[</span><span class="s1">&#39;AWS_SECRET_ACCESS_KEY&#39;</span><span class="o">]</span> %&amp;gt;
</span><span class='line'>  username: ubuntu
</span><span class='line'>  security_group_ids: <span class="o">[</span><span class="s2">&quot;&amp;lt;%= ENV[&#39;AWS_SECURITY_GROUP_ID&#39;] %&amp;gt;&quot;</span><span class="o">]</span>
</span><span class='line'>  port: 22
</span><span class='line'>  ebs_optimized: <span class="nb">false</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>セットアップ</h3>

<p>EC2のインスタンスのセットアップを行います。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kitchen setup rails-ec2-ubuntu-1204
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>AWSマネージメントコンソール => EC2画面で立ち上がっているインスタンスを確認することができます。</p>

<p><img src="https://farm4.staticflickr.com/3724/13792234173_ac92f453a8.jpg" width="500" height="117" alt="スクリーンショット_2014-04-12_15_01_08"></p>

<h3>servespecテスト</h3>

<p>serverspecで立ち上げたvagrantのテストを行います。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kitchen verify rails-ec2-ubuntu-1204&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;次のように出れば成功&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Finished in seconds&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;15 examples, 0 failures&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Finished verifying &lt;rails-do-ubuntu-1204&gt;&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;-----&gt; Kitchen is finished&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>サーバのセットアップ完了 => Railsアプリデプロイまでの手順</h2>

<pre>
(1) test-kitchenの実行 => テスト実行

(2) Elastic Block Storeを設定

(3) 鯖側にdeploy用のキーを作成 => 公開鍵をGitHubに登録

(4) MySQLのユーザー作成
GRANT ALL PRIVILEGES ON DB_NAME.* TO USER_NAME@localhost IDENTIFIED BY ‘PASSWORD';
FLUSH PRIVILEGES;

(5) ローカルでcapistranoを使ったデプロイ
cap production deploy:starting
cap production deploy:check
cap production deploy # dbがないのでコケる

(6) 鯖のreleaseフォルダで、bundle exec rake RAILS_ENV=production db:create

(7)cap production deploy
</pre>


<p>初回デプロイ時にDBが無いときに先にDBを作成する方法は、もっといい方法があるはずなのでご存じの方がいれば、コメントを頂ければ幸いです！</p>

<p><strong><a href="http://morizyun.github.io/blog/capistrano3-rails-deploy-multi-rbenv/">Capistrano 3系でRails4.1のデプロイ</a></strong><br/>
Capistrano 3の設定はこちらがおすすめ。</p>

<h2>次のステップ</h2>

<p>残念ながら今回は挫折しましたが、Dokkuをまる２日位ためしてみました。まだまだ実用レベルとは言いづらいですが、可能性をすごく感じるプロダクトです！今回は調査していた中で見つけたサイトをメモがてら書いておきます。</p>

<h2>ChefでDocker&amp;Dokkuをインストール</h2>

<p><strong><a href="https://github.com/fgrehm/chef-dokku">fgrehm/chef-dokku - GitHub</a></strong></p>

<p><strong><a href="https://github.com/bflad/chef-docker">bflad/chef-docker - GitHub</a></strong></p>

<p><strong><a href="https://github.com/progrium/dokku">progrium/dokku - GitHub</a></strong></p>

<p><strong><a href="https://github.com/rlister/chef-dokku-simple">rlister/chef-dokku-simple - GitHub</a></strong></p>

<p><strong><a href="https://github.com/hughfletcher/dokku-mysql-plugin">hughfletcher/dokku-mysql-plugin - GitHub</a></strong></p>

<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h2>Special Thanks</h2>

<p><strong><a href="http://engineer.wantedly.com/2014/03/27/setup-elasticsearch-cluster-on-ec2-with-chef.html">Chef で Elasticsearch クラスタを EC2 上に作る</a></strong><br/>
こちらのブログでtest-kitchenの使い方を知ることが出来ました。多謝です！</p>

<p><strong><a href="http://blog.glidenote.com/blog/2014/02/26/vagrant-dotenv/">dotenvを利用して環境ごとでVagrantfileの設定値を変更してみる</a></strong><br/></p>

<p><strong><a href="https://github.com/test-kitchen/kitchen-digitalocean">test-kitchen/kitchen-digitalocean</a></strong><br/></p>

<h2>変更来歴</h2>

<p>(04/12 12:45) Degital OceanとAWS EC2を適用<br/>
(04/14 23:35) Docker &amp; Dokkuに関するメモ書きを追記<br/>
(04/23 22:50) CentOS 6.5 x Vagrantを追加、バグフィックス<br/>
(04/25 23:00) ちょこちょこミスがあった点を修正<br/>
(05-02 08:35) Rubyサーバ・デプロイまでのチェックリストを追加<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec初心者向けの資料まとめ[Ruby][Everyday Rails書評]]]></title>
    <link href="http://morizyun.github.io/blog/rspec-beginner-bdd-tdd-test-first/"/>
    <updated>2014-05-02T08:05:00+09:00</updated>
    <id>http://morizyun.github.io/blog/rspec-beginner-bdd-tdd-test-first</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4798121932/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4798121932&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4798121932&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4798121932" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />最近、RspecやCapybaraでRailsのテストを書くたびに、ちょっとした書き方がわからずググったり、冗長なテストを書くことに結構悩んでいました。ということで、思い切ってRspec再入門として、『<strong><a href="https://leanpub.com/everydayrailsrspec-jp">Everyday Rails - RSpecによるRailsテスト入門</a></strong>』を読みました！Rails/Rubyはどんどんバージョンアップするので、紙媒体の書籍だと情報が古くなってしまっている場合があります。この書籍は著者や訳者さんが、しっかりとアップデートを続けてくれているので、最新の入門チュートリアルとしてRspecの実践的な使い方を習得できる書籍です。</p>

<p>またこの本を読むにあたってRSpecのドキュメントやWebサイトを読みなおしたので、合わせてRSpec初学者向けのマトメを作りました！</p>

<!-- more -->


<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h2>RSpec 3初心者向けの資料まとめ</h2>

<p><strong><a href="/blog/rspec3-beginner-bdd-tdd-test-first">RSpec 3初心者向けの資料まとめ[Ruby]</a></strong></p>

<p>ちなみにその他のTDDやRSpecの入門記事も書いています。こちらも良ければ是非読んでみてください＾＾</p>

<h2>Everyday Rails - RSpecによるRailsテスト入門</h2>

<p><a href="https://leanpub.com/everydayrailsrspec-jp" title="large by morizyun, on Flickr"><img src="https://farm8.staticflickr.com/7565/16219331906_8d9010083f_o.png" width="150" style="float: left; margin: 0 20px 20px 0;" alt="large"></a>
もしも体系的な知識を獲得したいなら、やはりこの『<a href="https://leanpub.com/everydayrailsrspec-jp">Everyday Rails - RSpecによるRailsテスト入門</a>』
一択だと思います。この本の中で特に印象に残った部分を『<strong><a href="/blog/everyday-rails-beginner-rspec-book-review">Everyday Rails RSpecによるRailsテスト入門でRSpec3に再入門！</a></strong>』がオススメす。
良かったら是非読んでみてください＾＾</p>

<br style="clear:both;"/>


<h2>おすすめドキュメント</h2>

<h3>TDD/BDDとは？</h3>

<p><strong><a href="http://www.atmarkit.co.jp/ait/articles/1404/30/news022.html">TDD/BDDにおける「振る舞い」の意味するところとは何なのか</a></strong><br/>
Rspecに限定された記事ではないですが、BDDの根本的な概念の「振る舞い」についてまとめられた記事。初心者向けなので、かなり説明が丁寧で分かりやすいです！</p>

<h3>Rspec/Capybara</h3>

<p><strong><a href="http://magazine.rubyist.net/?0021-Rspec">スはスペックのス 【第 1 回】 RSpec の概要と、RSpec on Rails (モデル編)</a></strong><br/>
<strong><a href="http://magazine.rubyist.net/?0023-Rspec">スはスペックのス 【第 2 回】 RSpec on Rails (コントローラとビュー編)</a></strong><br/>
RSpecの説明やテスト駆動開発の入門的記事。</p>

<p><strong><a href="http://www.oiax.jp/rails/rspec_capybara_primer.html">RSpec/Capybara入門</a></strong><br/></p>

<blockquote>
Railsを学習中の初心者がテスト駆動開発(TDD)あるいはビヘイビア駆動開発(BDD)を実践するための基礎的な知識や考え方を説明していきます。
</blockquote>


<p><strong><a href="http://qiita.com/awakia/items/d880250adc8cdbe7a32f">RSpecのshouldはもう古い！新しい記法expectを使おう！</a></strong><br/>
RSpecの今風の書き方についてのバイブル的な記事。10回以上は読んでいますw</p>

<p><strong><a href="http://magazine.rubyist.net/?0035-RSpecInPractice">改めて学ぶ RSpec</a></strong><br/>
一歩すすんで、 it や describe やテストの実行の仕方などを知った人が実践の中で使っていくために必要なノウハウを中心にまとめてくれています！</p>

<p><strong><a href="http://betterspecs.org/jp/">Better Spec</a></strong><br/>
Better Specsは開発者達の経験を、体系化したドキュメントです。中級者の人が、さらにRSpecでのテストを書けるようになりたいときにぜひ読んでほしい資料です！</p>

<h2>モック・スタブについて</h2>

<p><strong><a href="http://morizyun.github.io/blog/rspec-model-controller-ruby-rails/">RSpec でテストを作るのに役立つ「モック/スタブ」のシンプルな説明</a></strong><br/>
メソッド同士の依存関係を疎に保つのに役に立つのがモックやスタブといった機能です。少しテストを書くのに慣れてきたら是非読んでみてください。</p>

<h2>FactoryGirl</h2>

<p><strong><a href="http://o.inchiki.jp/obbr/159">RailsでFactoryGirlを使ってみるメモ</a></strong><br/>
体系的にFactoryGirlの使い方をまとめているドキュメント。初心者の人のとっかかりから、ちょっと凝った使い方まで網羅されています。素晴らしい！</p>

<p><strong><a href="http://qiita.com/yui-knk/items/bf5ec1bf382e965660b2">factory_girlの使い方 - Qiita</a></strong><br/>
テストのときのFixtureとして有名なfactory_girlの使い方をサンプルソースとセットで説明をしてくれています。FactoryGirlを使いはじめるときに読んでおくと捗るかも。</p>

<p><strong><a href="http://qiita.com/torshinor/items/383691344ec4a2233fe5">Rails - Factory Girl 3.x メモ - Qiita</a></strong><br/>
FactoryGirlの応用的な使い方を中心に説明。初心者むけというよりはFactoryGirlを使っていく中でより、使いこなしたいと思う人にオススメのドキュメント。</p>

<p><strong><a href="https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md"> factory_girl / GETTING_STARTED.md</a></strong><br/>
英語が読めるなら、FactoryGirlの本家スタートガイドがおすすめ。洗練されていて一番わかりやすい！</p>

<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h2>変更来歴</h2>

<p>(2014-04-17 18:00) 新規作成<br/>
(2014-05-02 08:05) TDD/BDDとは？を追加<br/>
(2015-01-12 22:30) Everyday Railsの書評部分を分離<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[大江戸Ruby会議04参加しました！ スライド・リンクまとめ]]></title>
    <link href="http://morizyun.github.io/blog/oedo-ruby-kaigi-04-asakusa-rb/"/>
    <updated>2014-05-01T21:20:00+09:00</updated>
    <id>http://morizyun.github.io/blog/oedo-ruby-kaigi-04-asakusa-rb</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774158798/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774158798&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774158798&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774158798" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Asakusa.rbが主催している『<strong><a href="http://regional.rubykaigi.org/oedo04/">大江戸Ruby会議04</a></strong>』に参加してきました。10時スタート、19時半終了で15件以上の発表があり、盛りだくさんでした。そして、アットホームな雰囲気と「生活発表会」という絶妙なテーマで時間を感じさせないすごく楽しい一日でした！</p>

<p>シンプルにスライドや、発表の中で出ていたリンクを中心にまとめています。<br/>
(話に聞き入りすぎて、メモを結構忘れていました。断片的ですごく申し訳ない＾＾；)</p>

<p><strong>(05-01 21:20) Youtubeの配信動画、スライド2つ追加</strong></p>

<!-- more -->


<br style="clear:both;"/>


<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h2>これから読んでいきたい書籍</h2>

<p><strong><a href="http://i.loveruby.net/ja/rhg/book/">Rubyソースコード完全解説</a></strong><br/>
今回のAsakusa.rbで、4-5回オススメされていた『Rubyソースコード完全解説』。HTML版は無料で読めるそうです。</p>

<p><strong><a href="http://ruby-hacking-guide.github.io">Ruby Hacking Guide</a></strong><br/>
<strong><a href="https://github.com/ruby-hacking-guide/ruby-hacking-guide.github.com/tree/master/original_repo">ruby-hacking-guide.github.com / original_repo - GitHub</a></strong><br/>
おなじくRuby Hacking Guide(RHG)も何度かオススメされていました。英語の本ですが、日本語の翻訳も進行中だそうです！</p>

<p><strong><a href="http://patshaughnessy.net/ruby-under-a-microscope">Ruby Under a Microscope</a></strong><br/>
<strong><a href="https://speakerdeck.com/yotii23/ruby-under-a-microscope-wodu-ndemita-tumamiguishao-jie-bian">Ruby Under a Microscope  を読んでみた （つまみぐい紹介編）</a></strong><br/>
英語ですが、Rubyの内部構造を紹介する書籍。Ruby 2.0.0に対応しているそうです。</p>

<h2>Youtube動画</h2>

<p><strong><a href="https://www.youtube.com/playlist?list=PLkcX6PjCRhhoh8e9mctY5FgUAfyzwlsTY">大江戸Ruby会議04</a></strong><br/>
大江戸Ruby会議04のYoutube動画がアップロードされていました。勉強会の動画ってこれからどんどんアップロードされるようになるんだろうな＾＾</p>

<h2>From 'Legacy' to 'Edge' 2014 edition</h2>

<p><strong><a href="https://twitter.com/hsbt">@hsbt</a></strong>さんの発表。</p>

<h3>発表スライド</h3>

<p><strong><a href="https://speakerdeck.com/hsbt/from-legacy-to-edge-2014-edition">From 'Legacy' to 'Edge' 2014 edition</a></strong><br/>
ペパボさんのサービス「<strong><a href="http://30d.jp/">30d.jp</a></strong>」でRuby 1.8.6/Rails 2.0.2 => Ruby 2.1.0/Rails 4.1.0にバージョンアップした話！</p>

<p>@hsbtさんのブログ、<strong><a href="http://www.hsbt.org/diary/20140419.html">大江戸 Ruby 会議 04 を開いてきた &amp; 発表してきた - HsbtDiary(2014-04-19)</a></strong>。</p>

<h2>Infrataster</h2>

<h3>発表スライド</h3>

<p><strong><a href="https://speakerdeck.com/ryotarai/infrataster-infra-behavior-testing-framework-number-oedo04">Infrataster</a></strong></p>

<h3>GitHubリポジトリ</h3>

<p><strong><a href="https://github.com/ryotarai/infrataster">ryotarai/infrataster - GitHub</a></strong></p>

<h3>メモ</h3>

<p><strong><a href="http://github-trends.ryotarai.info">GitHub Trends RSS</a></strong><br/>
GitHubのTrendsをRSSで配信しているサービス。僕もRubyを早速登録しました</p>

<p><strong><a href="https://github.com/ryotarai/git-commit-autouser">ryotarai/git-commit-autouser - GitHub</a></strong><br/>
gitのコミットユーザーを自動で切り替え。</p>

<h2>いかにして海外でエンジニアで働くか</h2>

<p><strong><a href="https://twitter.com/lchin">@lchin</a></strong>さんの発表。</p>

<h3>言語の勉強法</h3>

<p>学校や資格は、基礎は学べるけどやればやるほど効果が薄くなる。語学は練習することが一番大切。</p>

<p>より大切なことは文化を知り、コミュニティに飛び込んでいけるようになること。</p>

<pre>
1) ENCOUNTER => ネット文化に触れる
2) EMBARGE => 自ら飛び込む
3) LEARN/ENJOY => 楽しみながら学ぶ
</pre>


<p>英語を学習する際のオススメのアクション！</p>

<pre>
1) REDDITを見る => TIL、AIM、ELI5(EXPLAIN LIKE I'M 5)がオススメ
2) ネタの宝庫、わからなければググる
3) コミュニティでネタをわかるようになる
</pre>


<h2>画像を破壊すること、OSS活動すること、その他</h2>

<h3>発表スライド</h3>

<p><strong><a href="https://speakerdeck.com/makimoto/glitch-oss-activities-and-so-on-oedo-rubykaigi-04-number-oedo04">画像を破壊すること、OSS活動すること、その他</a></strong></p>

<h3>GitHubリポジトリ</h3>

<p><strong><a href="https://github.com/makimoto/glitched_string">makimoto/glitched_string - GitHub</a></strong></p>

<h3>メモ</h3>

<h4>OSSへの参加について</h4>

<p>GitHubでのおすすめのアクション！</p>

<pre>
1) 最初は自分のライブラリを作る
2) 使っているライブラリで壊れているものを直す
3) 抵抗感がなくなって、どんどんPRするようになる
</pre>


<h2>Adequate Record</h2>

<p><strong><a href="http://tenderlovemaking.com/2014/02/19/adequaterecord-pro-like-activerecord.html">AdequateRecord Pro™: Like ActiveRecord, but more adequate</a></strong>について。AdequateRecordはActiveRecordのFork。staticとdinamicな部分を分離して、staticな部分をキャッシュすることで速度改善。4.2からActiveRecord周りが早くなるらしい。</p>

<h2>1年かけて1つのGemを作りました</h2>

<h3>発表スライド</h3>

<p><strong><a href="https://speakerdeck.com/kunitoo/1nian-kaketegemwo1tuzuo-rimasita">1年かけてgemを1つ作りました </a></strong></p>

<h3>GitHubリポジトリ</h3>

<p><strong><a href="http://d.hatena.ne.jp/kunitoo/20131214/1387018686">kunitoo/rgitlog - GitHub</a></strong><br/>
実際にライブコーディングで30分でGemが出来ました。Asakusa.rbすごい！</p>

<h2>Deeper look at RFC7159 the JSON</h2>

<h3>発表スライド</h3>

<p><strong><a href="https://speakerdeck.com/shyouhei/deeper-look-at-rfc7159-the-json">Deeper look at RFC7159 the JSON</a></strong></p>

<h3>GitHubリポジトリ</h3>

<p><strong><a href="https://github.com/shyouhei/RFC7159">shyouhei/RFC7159 - GitHub</a></strong></p>

<h2>Another language you should learn</h2>

<p>TechCrunch Japanの編集長、<strong><a href="https://twitter.com/knsmr">@knsmr</a></strong>さんの発表。30歳から英語を勉強されたお話です。</p>

<h3>サンフランシスコでの語学留学</h3>

<p>1年間休職して、サンフランシスコで徹底的に基礎を勉強。</p>

<pre>
サンフランシスコの公立の図書館に1年通って文法の本を精読した。
DVD(フレンズ)やテレビを見た。
</pre>


<h3>帰国してから</h3>

<p>英語の本を読んだり、英語の音声を聞いてきた。インプットこそが命。</p>

<h3>Rails アプリを作った</h3>

<p><strong><a href="http://knsmr.github.io/reijiro/">英辞郎CD-ROMを使った間隔反復学習のためのRailsアプリ</a></strong><br/>
英単語を忘却曲線に従って覚えるアプリ。</p>

<h3>まとめ: 終わりはない</h3>

<pre>
とにかく始める、文化を学ぶ
動機を持つ
デイリーでインプットをやる
プロセス自体を楽しめるようにして長期間やれるようにする
</pre>


<h2>mruby hacking guide</h2>

<p><strong><a href="https://twitter.com/_ksss_">@<em>ksss</em></a></strong>さんの発表。</p>

<h3>発表スライド</h3>

<p><strong><a href="https://speakerdeck.com/ksss/mruby-hacking-guide">mruby hacking guide</a></strong></p>

<h3>ブログ</h3>

<p><strong><a href="http://ksss9.hatenablog.com/entry/2014/04/20/214250">大江戸Ruby会議04で話さなかったこと - スペクトラム</a></strong></p>

<h2>Ruby会議でSQLの話をするのは間違っているだろうか</h2>

<h3>発表スライド</h3>

<p><strong><a href="http://www.slideshare.net/mineroaoki/20140420-oedo-ruby-conference-04-rubysql">Ruby会議でSQLの話をするのは間違っているだろうか</a></strong></p>

<h2>大江戸Ruby会議04に関するブログ/Togetter</h2>

<p>Togetterまとめアップしていただけていました！</p>

<p><strong><a href="http://togetter.com/li/657366">大江戸Ruby会議04 - Togetter</a></strong></p>

<p>早速、参加者の方のブログがアップされていました！</p>

<p><strong><a href="http://shindolog.hatenablog.com/entry/2014/04/19/233741">大江戸 Ruby 会議04 に参加しました - Programming log - Shindo200</a></strong></p>

<p><strong><a href="http://d.hatena.ne.jp/longicorn/20140420">大江戸Ruby会議04に参加してきました - longicornの日記</a></strong></p>

<p><strong><a href="http://igarashikuniaki.net/diary/20140419.html">大江戸Ruby会議04 - いがいが日記</a></strong></p>

<p><strong><a href="http://www.artonx.org/diary/20140420.html#p01?utm_source=twitterfeed&amp;utm_medium=twitter">大江戸Ruby会議04 - 日々の破片</a></strong></p>

<p><strong><a href="http://masutaka.net/chalow/2014-04-20-1.html">大江戸Ruby会議04に行ってきた #oedo04</a></strong></p>

<p><strong><a href="http://xoyip.hatenablog.com/entry/2014/04/20/221215">ぼっちで大江戸Ruby会議 #oedo04 - PILOG</a></strong></p>

<p><strong><a href="http://sho.tdiary.net/20140419.html">「大江戸Ruby会議04」へ行ってきた - ただのにっき(2014-04-19)</a></strong></p>

<p><strong><a href="http://tanstaafl.0pt.jp/posts/2014/04/20/9405e4f19790">大江戸Ruby会議04に参加してきた！ // フリーランチなど無い - There ain't no such thing as a free lunch</a></strong></p>

<p><strong><a href="http://d.hatena.ne.jp/katoriexxxkatorie/20140421/1398045359">大江戸Ruby会議04 #oedo04 - プログラミングお勉強記録</a></strong></p>

<p><strong><a href="http://tknzk.hateblo.jp/entry/2014/04/21/194642">大江戸Ruby会議04にいってきた #oedo04 - tknzk's tech log</a></strong></p>

<p><strong><a href="http://www.artonx.org/diary/20140420.html#p01">大江戸Ruby会議04 - L'eclat des jours(2014-04-20)</a></strong></p>

<p><strong><a href="http://y-yagi.tumblr.com/post/83399236620/ruby-04">大江戸Ruby会議04に参加した | 日々雑記</a></strong></p>

<p><div>
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-4186413323075068";
  /* middle_yoko_naga2 */
  google_ad_slot = "4362325392";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
          src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>
</div></p>

<h2>変更来歴</h2>

<p>(04/20 13:30) 大江戸Ruby会議04に関するブログを追加<br/>
(04/20 19:35) 大江戸Ruby会議04に関するブログ/Togetterを追加<br/>
(04/20 21:40) @hsbtさんのFrom 'Legacy' to 'Edge' 2014 edition 発表スライド追加<br/>
(04/20 23:00) 大江戸Ruby会議04に関するブログを追加<br/>
(04/21 08:00) 大江戸Ruby会議04に関するブログを追加<br/>
(04/21 21:55) mruby hacking Guideのスライド/ブログを追加<br/>
(05-01 21:20) Youtubeの配信動画、スライド2つ追加<br/></p>
]]></content>
  </entry>
  
</feed>
